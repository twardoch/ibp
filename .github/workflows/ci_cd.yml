name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ] # Adjust as per your branch strategy
    tags: [ 'v*' ] # For releases
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build_and_test:
    name: Build & Test on ${{ matrix.os }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.11"] # Choose relevant Python versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for hatch-vcs to get tags

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      shell: bash

    - name: Add uv to PATH (Unix)
      if: runner.os != 'Windows'
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      shell: bash

    - name: Add uv to PATH (Windows)
      if: runner.os == 'Windows'
      run: echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Verify uv installation
      run: uv --version

    - name: Install Hatch
      run: uv pip install hatch hatch-vcs

    # C++ Dependencies
    - name: Install C++ Build Tools (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake qtbase5-dev libqt5widgets5 libopencv-dev libfreeimage-dev
      # Note: Specific versions of Qt, OpenCV, FreeImage might be needed.
      # This installs system versions which might vary.

    - name: Install C++ Build Tools (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake qt5 opencv freeimage
        echo "/usr/local/opt/qt@5/bin" >> $GITHUB_PATH # Ensure Qt5 tools are in PATH
        export CMAKE_PREFIX_PATH="/usr/local/opt/qt@5:/usr/local/opt/opencv@4:/usr/local/opt/freeimage"
      # Note: Adjust paths and versions if necessary (e.g. opencv@4)
      # May need to link opencv if it's keg-only: brew link opencv@4 --force

    - name: Install C++ Build Tools (Windows)
      if: runner.os == 'Windows'
      # Assuming Visual Studio is available on Windows runners (usually "Visual Studio Build Tools")
      # CMake, Qt, OpenCV, FreeImage might need specific setup.
      # Using vcpkg or chocolatey can simplify this.
      run: |
        # Example using Chocolatey (uncomment and adapt if you want to use it)
        # choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        # choco install qt5-base # Might need specific Qt package
        # choco install opencv # Might need specific OpenCV package
        # choco install freeimage # Might need specific FreeImage package
        echo "Windows C++ environment setup requires manual configuration or a package manager like vcpkg/choco."
        echo "Ensure CMake, Qt5, OpenCV, and FreeImage are available in the PATH or via CMAKE_PREFIX_PATH."
        # For now, this step is a placeholder. A full vcpkg setup is more involved.
        # If using MSVC, the Developer Command Prompt is usually needed or PATH setup.

    - name: Build package with Hatch
      run: hatch build
      # The hatch_build.py script handles CMake configuration and build.
      # Environment variables like CMAKE_PREFIX_PATH might be needed for CMake to find dependencies,
      # especially on macOS and Windows if not in standard locations.

    - name: Install project and dev dependencies
      run: uv pip install .[dev] # Assuming you'll add a [dev] extra for ruff, mypy, pytest

    - name: Lint with Ruff
      run: ruff check .

    - name: Format with Ruff
      run: ruff format . --check

    - name: Type check with MyPy
      run: mypy src --ignore-missing-imports
      # Add other paths to type check if needed

    - name: Test with Pytest
      run: pytest
      # This will run tests in tests/test_packaging.py
      # The packaged executable should be available via the imagebatchprocessor.main() entry point.

    - name: Upload Wheel as Artifact (optional)
      if: success() && matrix.os == 'Linux' && matrix.python-version == '3.11' # Example: only for one specific job
      uses: actions/upload-artifact@v4
      with:
        name: imagebatchprocessor-wheel-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v') # Only run for version tags
    needs: build_and_test # Ensure build and tests pass on all platforms before releasing
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create releases and upload assets

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # For hatch-vcs

    - name: Set up Python (for Hatch)
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Or your primary Python version

    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      shell: bash

    - name: Add uv to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install Hatch
      run: uv pip install hatch hatch-vcs

    # We need to build the artifacts again, or download them if build_and_test uploaded them.
    # For simplicity, let's rebuild for the release job, ensuring it's clean.
    # C++ Dependencies for Release Build (Linux - as runs-on is ubuntu-latest)
    - name: Install C++ Build Tools (Linux for Release)
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake qtbase5-dev libqt5widgets5 libopencv-dev libfreeimage-dev

    - name: Build wheels and sdist for release
      run: hatch build -t wheel -t sdist # Build both wheel and source distribution

    - name: Display built artifacts
      run: ls -R dist/

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2 # Popular action for creating releases
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
        # token: ${{ secrets.GITHUB_TOKEN }} # Automatically available
        # The release name and body will be taken from the tag by default.
        # Set `prerelease: true` if your tag indicates a prerelease (e.g., v1.0.0-alpha.1)
        # prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Notes for C++ dependencies:
# - Linux: Uses apt-get. Versions might vary.
# - macOS: Uses brew. Qt5 might need CMAKE_PREFIX_PATH. `export CMAKE_PREFIX_PATH=$(brew --prefix qt@5)` is common.
# - Windows: Most complex. Requires Visual Studio Build Tools. Dependencies (Qt, OpenCV, FreeImage)
#   are best managed with vcpkg or by ensuring they are discoverable by CMake.
#   The workflow currently has placeholders; a robust Windows C++ build in GH Actions
#   often involves caching vcpkg dependencies or pre-installing them on self-hosted runners.

# Need to add [project.optional-dependencies] for 'dev' in pyproject.toml
# [project.optional-dependencies]
# dev = ["ruff", "mypy", "pytest"]
# I will do this next.
